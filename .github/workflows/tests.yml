name: Run tests

permissions:
  contents: read

on:
  push:
  pull_request:

jobs:
    test-php:
        name: Test on php ${{ matrix.php-version }} and ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        continue-on-error: ${{ matrix.experimental }}
        strategy:
            matrix:
                php-version: ["7.4", "8.0", "8.1", "8.2", "8.3"]
                os: [ubuntu-latest]
                experimental: [false]
                composer-options: ['']
                include:
                    - { php-version: 'nightly', experimental: true, os: ubuntu-latest, composer-options: '--ignore-platform-reqs' }
        steps:
            - uses: actions/checkout@v4
            - name: Use php ${{ matrix.php-version }}
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  coverage: pcov
            - name: Get Composer Cache Directory
              id: composer-cache
              run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
            - name: Restore cache
              uses: actions/cache@v3
              with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                restore-keys: |
                  ${{ runner.os }}-composer-
            - name: Install dependencies
              run: composer install --no-interaction ${{ matrix.composer-options }}
            - name: Run php tests
              run: composer run phpunit
            - name: Send coverage
              uses: codecov/codecov-action@v3

    test-phar:
        name: Run command line tests on the phar with php ${{ matrix.php-version }} on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        continue-on-error: ${{ matrix.experimental }}
        strategy:
            fail-fast: false
            matrix:
                php-version: ["7.4", "8.0", "8.1", "8.2", "8.3"]
                os: [ubuntu-latest]
                experimental: [false]
                composer-options: ['']
                include:
                    - { php-version: 'nightly', experimental: true, os: ubuntu-latest, composer-options: '--ignore-platform-reqs' }
        steps:
            - uses: actions/checkout@v4
            - name: Use php ${{ matrix.php-version }}
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
            - name: Cache module
              uses: actions/cache@v3
              with:
                  path: ~/shunit2_2.1.8-4_all.deb
                  key: shunit2-cache
            - name: Setup shunit 2
              run: |
                wget http://ftp.debian.org/debian/pool/main/s/shunit2/shunit2_2.1.8-4_all.deb -O ~/shunit2_2.1.8-4.deb
                sudo apt install -y ~/shunit2_2.1.8-4.deb
            - name: Run phar tests
              run: |
                COMPOSER_BIN="/bin/composer" COMPOSER_OPTIONS="${{ matrix.composer-options }}" ./tests/phar/tests.sh

    test-resume-from-parse:
        name: Run resume from parse tests with php ${{ matrix.php-version }} on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        continue-on-error: ${{ matrix.experimental }}
        strategy:
            fail-fast: false
            matrix:
                php-version: ["7.4", "8.0", "8.1", "8.2", "8.3"]
                os: [ubuntu-latest]
                experimental: [false]
                composer-options: ['']
                include:
                    - { php-version: 'nightly', experimental: true, os: ubuntu-latest, composer-options: '--ignore-platform-reqs' }
        steps:
            - uses: actions/checkout@v4
            - name: Use php ${{ matrix.php-version }}
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
            - name: Get Composer Cache Directory
              id: composer-cache
              run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
            - name: Restore cache
              uses: actions/cache@v3
              with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                restore-keys: |
                  ${{ runner.os }}-composer-
            - name: Install dependencies
              run: composer install --no-interaction ${{ matrix.composer-options }}
            - name: Run resume from parse diff tests
              run: ./tests/resume-from-parse-test.sh

    test-composer-package-auto-test:
        name: Run auto-package tests with php ${{ matrix.php-version }} on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        continue-on-error: ${{ matrix.experimental }}
        strategy:
            fail-fast: false
            matrix:
                php-version: ["7.4", "8.0", "8.1", "8.2", "8.3"]
                os: [ubuntu-latest]
                experimental: [false]
                composer-options: ['']
                include:
                    - { php-version: 'nightly', experimental: true, os: ubuntu-latest, composer-options: '--ignore-platform-reqs' }
        steps:
            - uses: actions/checkout@v4
            - name: Use php ${{ matrix.php-version }}
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
            - name: Get Composer Cache Directory
              id: composer-cache
              run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
            - name: Restore cache
              uses: actions/cache@v3
              with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                restore-keys: |
                  ${{ runner.os }}-composer-
            - name: Run composer package self tests
              env:
                  COMPOSER_CLI_OPTIONS: ${{ matrix.composer-options }}
              run: ./tests/composer-package-auto-test.sh
